Règles complémentaires :
1. L'appel à l'API ne DOIT JAMAIS être changé.
2. Le modèle appelé est TOUJOURS celui-ci : claude-3-5-sonnet-20241022
3. Réfère toi à la doc d'Anthropic ci-dessous :

<doc>
Voici le transcript en Markdown propre et structuré de la documentation Anthropic:

# Initial setup

Let's learn how to use the Anthropic API to build with Claude. In this example, we'll have Claude write a Python function that checks if a string is a palindrome.

## Prerequisites

You will need:
- An Anthropic Console account
- An API key
- Python 3.7+ or TypeScript 4.5+

Anthropic provides Python and TypeScript SDKs, although you can make direct HTTP requests to the API.

## Start with the Workbench

Any API call you make–regardless of the specific task–sends a well-configured prompt to the Anthropic API. As you're learning to make the most of Claude, we recommend that you start the development process in the Workbench, a web-based interface to Claude.

Log into the Anthropic Console and click Workbench. In the middle section, under User, let's ask Claude a question:

```
Why is the ocean salty?
```

Response:
```
The ocean is salty due to several factors:

1. Weathering of rocks: Over millions of years, rain, rivers, and streams have...
2. Volcanic activity: Underwater volcanoes and hydrothermal vents release minerals...
3. Atmospheric deposition: Salt particles from ocean spray can be carried by wind...
4. Evaporation: As water evaporates from the surface of the ocean, it leaves behind...
5. Biological processes: Some marine organisms contribute to the ocean's salinity...

Over time, these processes have continuously added salts to the ocean, while evaporation...
```

This is a good answer, but let's say we wanted to control the exact type of answer Claude gives. For example, only allowing Claude to respond to questions with poems. We can control the format, tone, and personality of the response by adding a System Prompt:

```
You are a world-class poet. Respond only with short poems.
```

Response:
```
The ocean's salty brine,
A tale of time and elements combined.
Rocks and rain, a slow erosion,
Minerals carried in solution.
Eons pass, the salt remains,
In the vast, eternal watery domain.
```

## Install the SDK

In your project directory, create a virtual environment:
```bash
python -m venv claude-env
```

Activate the virtual environment using:
- On macOS or Linux: `source claude-env/bin/activate`
- On Windows: `claude-env\Scripts\activate`

Install the SDK:
```bash
pip install anthropic
```

## Set your API key

Every API call requires a valid API key. The SDKs are designed to pull the API key from an environmental variable `ANTHROPIC_API_KEY`. You can also supply the key to the Anthropic client when initializing it.

For macOS and Linux:
```bash
export ANTHROPIC_API_KEY='your-api-key-here'
```

## Call the API

Here's an example Python script (claude_quickstart.py):
```python
import anthropic
client = anthropic.Anthropic()

message = client.messages.create(
    model="claude-3-5-sonnet-20241022",
    max_tokens=1000,
    temperature=0,
    system="You are a world-class poet. Respond only with short poems.",
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Why is the ocean salty?"
                }
            ]
        }
    ]
)
print(message.content)
```

Run the code using `python3 claude_quickstart.py`.

The Workbench and code examples use default model settings for: model (name), temperature, and max tokens to sample.

## Next steps

Now that you have made your first Anthropic API request, explore what else is possible:

- **Use Case Guides**: End to end implementation guides for common use cases.
- **Anthropic Cookbook**: Learn with interactive Jupyter notebooks that demonstrate uploading PDFs, embeddings, and more.
- **Prompt Library**: Explore dozens of example prompts for inspiration across use cases.
</doc>